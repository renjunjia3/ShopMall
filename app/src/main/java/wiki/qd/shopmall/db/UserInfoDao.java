package wiki.qd.shopmall.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import wiki.qd.shopmall.entity.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Integer> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, int.class, "user_id", true, "USER_ID");
        public final static Property Access_token = new Property(1, String.class, "access_token", false, "ACCESS_TOKEN");
        public final static Property Refresh_token = new Property(2, String.class, "refresh_token", false, "REFRESH_TOKEN");
        public final static Property Create_time = new Property(3, long.class, "create_time", false, "CREATE_TIME");
        public final static Property Expired_time = new Property(4, long.class, "expired_time", false, "EXPIRED_TIME");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
        public final static Property Nickname = new Property(6, String.class, "nickname", false, "NICKNAME");
        public final static Property Level = new Property(7, int.class, "level", false, "LEVEL");
        public final static Property Sex = new Property(8, int.class, "sex", false, "SEX");
        public final static Property Payed_times = new Property(9, int.class, "payed_times", false, "PAYED_TIMES");
        public final static Property Score = new Property(10, int.class, "score", false, "SCORE");
        public final static Property Avatar = new Property(11, String.class, "avatar", false, "AVATAR");
        public final static Property Money = new Property(12, int.class, "money", false, "MONEY");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"USER_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: user_id
                "\"ACCESS_TOKEN\" TEXT," + // 1: access_token
                "\"REFRESH_TOKEN\" TEXT," + // 2: refresh_token
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 3: create_time
                "\"EXPIRED_TIME\" INTEGER NOT NULL ," + // 4: expired_time
                "\"MOBILE\" TEXT," + // 5: mobile
                "\"NICKNAME\" TEXT," + // 6: nickname
                "\"LEVEL\" INTEGER NOT NULL ," + // 7: level
                "\"SEX\" INTEGER NOT NULL ," + // 8: sex
                "\"PAYED_TIMES\" INTEGER NOT NULL ," + // 9: payed_times
                "\"SCORE\" INTEGER NOT NULL ," + // 10: score
                "\"AVATAR\" TEXT," + // 11: avatar
                "\"MONEY\" INTEGER NOT NULL );"); // 12: money
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUser_id());
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(2, access_token);
        }
 
        String refresh_token = entity.getRefresh_token();
        if (refresh_token != null) {
            stmt.bindString(3, refresh_token);
        }
        stmt.bindLong(4, entity.getCreate_time());
        stmt.bindLong(5, entity.getExpired_time());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
        stmt.bindLong(8, entity.getLevel());
        stmt.bindLong(9, entity.getSex());
        stmt.bindLong(10, entity.getPayed_times());
        stmt.bindLong(11, entity.getScore());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(12, avatar);
        }
        stmt.bindLong(13, entity.getMoney());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUser_id());
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(2, access_token);
        }
 
        String refresh_token = entity.getRefresh_token();
        if (refresh_token != null) {
            stmt.bindString(3, refresh_token);
        }
        stmt.bindLong(4, entity.getCreate_time());
        stmt.bindLong(5, entity.getExpired_time());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
        stmt.bindLong(8, entity.getLevel());
        stmt.bindLong(9, entity.getSex());
        stmt.bindLong(10, entity.getPayed_times());
        stmt.bindLong(11, entity.getScore());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(12, avatar);
        }
        stmt.bindLong(13, entity.getMoney());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.getInt(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // access_token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // refresh_token
            cursor.getLong(offset + 3), // create_time
            cursor.getLong(offset + 4), // expired_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickname
            cursor.getInt(offset + 7), // level
            cursor.getInt(offset + 8), // sex
            cursor.getInt(offset + 9), // payed_times
            cursor.getInt(offset + 10), // score
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // avatar
            cursor.getInt(offset + 12) // money
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUser_id(cursor.getInt(offset + 0));
        entity.setAccess_token(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRefresh_token(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreate_time(cursor.getLong(offset + 3));
        entity.setExpired_time(cursor.getLong(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLevel(cursor.getInt(offset + 7));
        entity.setSex(cursor.getInt(offset + 8));
        entity.setPayed_times(cursor.getInt(offset + 9));
        entity.setScore(cursor.getInt(offset + 10));
        entity.setAvatar(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMoney(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getUser_id();
    }
    
    @Override
    public Integer getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
